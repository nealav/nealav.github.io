{"version":3,"sources":["webpack:///./src/layouts/BlogLayout.js","webpack:///./src/pages/css/Blog.module.css","webpack:///./src/layouts/css/BlogLayout.module.css","webpack:///./src/pages/blog.js"],"names":["BlogLayout","pageTitle","pageDescription","children","title","titleHref","className","classes","container","module","exports","BlogPostPreview","excerpt","path","date","preview","previewTitle","href","previewDate","icon","faCalendar","style","margin","previewExcerpt","Blog","data","allMarkdownRemark","edges","posts","site","siteMetadata","nonEmptyPosts","filter","post","node","frontmatter","length","map","id","key","pageQuery"],"mappings":"2FAAA,0DA4BeA,IArBf,YAA+D,IAAzCC,EAAwC,EAAxCA,UAAWC,EAA6B,EAA7BA,gBAAiBC,EAAY,EAAZA,SAChD,OACE,kBAAC,IAAD,CACEF,UAAWA,EACXC,gBAAiBA,EACjBE,MAAM,OACNC,UAAU,SAEV,0BAAMC,UAAWC,IAAQC,WACrBL,M,qBCfVM,EAAOC,QAAU,CAAC,QAAU,8BAA8B,aAAe,mCAAmC,YAAc,kCAAkC,eAAiB,uC,qBCA7KD,EAAOC,QAAU,CAAC,UAAY,wC,kCCC9B,+IAUA,SAASC,EAAT,GAKI,IAJFC,EAIC,EAJDA,QACAC,EAGC,EAHDA,KACAC,EAEC,EAFDA,KACAV,EACC,EADDA,MAEA,OACE,yBAAKE,UAAWC,IAAQQ,SACtB,wBAAIT,UAAWC,IAAQS,cACrB,kBAAC,IAAD,CACEC,KAAMJ,GAELT,IAGL,yBAAKE,UAAWC,IAAQW,aACtB,kBAAC,IAAD,CACEC,KAAMC,IACNC,MAAO,CACLC,OAAQ,oBAGZ,8BAAOR,IAET,yBAAKR,UAAWC,IAAQgB,gBACrBX,IAqFMY,UAxEf,YAEI,IAAD,IADDC,YACC,MADM,GACN,IAUGA,EARFC,kBAFD,gBAIK,GAJL,GAGGC,MAAOC,OAHV,MAGkB,GAHlB,IAUGH,EALFI,KALD,gBASK,GATL,GAMGC,aAME7B,GAZL,aAQO,GARP,GAOKG,MAKS,UAGT2B,EAAgBH,EACnBI,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAY/B,MAAMgC,OAAS,KAEvD,OACE,kBAAC,IAAD,CAAYnC,UAAWA,EAAWC,gBANZ,mBAOpB,6BACG6B,EACEM,KAAI,YAAqB,IAAZJ,EAAW,EAAjBC,KAEJI,EAOEL,EAPFK,GACA1B,EAMEqB,EANFrB,QAHqB,EASnBqB,EALFE,YACEtB,EALmB,EAKnBA,KACAC,EANmB,EAMnBA,KACAV,EAPmB,EAOnBA,MAIJ,OACE,kBAACO,EAAD,CACE4B,IAAKD,EACL1B,QAASA,EACTC,KAAMA,EACNC,KAAMA,EACNV,MAAOA,UAiChB,IAAMoC,EAAS","file":"component---src-pages-blog-js-f799cf36c1f16b092289.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport PageLayout from './PageLayout';\n\nimport classes from './css/BlogLayout.module.css';\n\nfunction BlogLayout({ pageTitle, pageDescription, children }) {\n  return (\n    <PageLayout\n      pageTitle={pageTitle}\n      pageDescription={pageDescription}\n      title=\"blog\"\n      titleHref=\"/blog\"\n    >\n      <main className={classes.container}>\n        { children }\n      </main>\n    </PageLayout>\n  );\n}\n\nBlogLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n  pageTitle: PropTypes.string.isRequired,\n  pageDescription: PropTypes.string.isRequired,\n};\n\nexport default BlogLayout;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preview\":\"Blog-module--preview--1gUJu\",\"previewTitle\":\"Blog-module--previewTitle--2d-s2\",\"previewDate\":\"Blog-module--previewDate--34007\",\"previewExcerpt\":\"Blog-module--previewExcerpt--217Be\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BlogLayout-module--container--2o27B\"};","import { graphql } from 'gatsby';\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCalendar } from '@fortawesome/free-regular-svg-icons';\n\nimport Anchor from '../components/Anchor';\nimport BlogLayout from '../layouts/BlogLayout';\n\nimport classes from './css/Blog.module.css';\n\nfunction BlogPostPreview({\n  excerpt,\n  path,\n  date,\n  title,\n}) {\n  return (\n    <div className={classes.preview}>\n      <h1 className={classes.previewTitle}>\n        <Anchor\n          href={path}\n        >\n          {title}\n        </Anchor>\n      </h1>\n      <div className={classes.previewDate}>\n        <FontAwesomeIcon\n          icon={faCalendar}\n          style={{\n            margin: '-1px 0.5em 0 0',\n          }}\n        />\n        <span>{date}</span>\n      </div>\n      <div className={classes.previewExcerpt}>\n        {excerpt}\n      </div>\n    </div>\n  );\n}\n\nBlogPostPreview.propTypes = {\n  path: PropTypes.string.isRequired,\n  title: PropTypes.string.isRequired,\n  date: PropTypes.string.isRequired,\n  excerpt: PropTypes.string.isRequired,\n};\n\nfunction Blog({\n  data = {},\n}) {\n  const {\n    allMarkdownRemark: {\n      edges: posts = [],\n    } = {},\n    site: {\n      siteMetadata: {\n        title: siteTitle,\n      } = {},\n    } = {},\n  } = data;\n\n  const pageTitle = `${siteTitle} - blog`;\n  const pageDescription = 'A personal blog';\n\n  const nonEmptyPosts = posts\n    .filter(post => post.node.frontmatter.title.length > 0);\n\n  return (\n    <BlogLayout pageTitle={pageTitle} pageDescription={pageDescription}>\n      <div>\n        {nonEmptyPosts\n          .map(({ node: post }) => {\n            const {\n              id,\n              excerpt,\n              frontmatter: {\n                path,\n                date,\n                title,\n              },\n            } = post;\n\n            return (\n              <BlogPostPreview\n                key={id}\n                excerpt={excerpt}\n                path={path}\n                date={date}\n                title={title}\n              />\n            );\n          })}\n      </div>\n    </BlogLayout>\n  );\n}\n\nBlog.propTypes = {\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      edges: PropTypes.arrayOf(PropTypes.shape({\n        node: PropTypes.shape({\n          id: PropTypes.string.isRequired,\n          frontmatter: PropTypes.shape({\n            path: PropTypes.string.isRequired,\n            title: PropTypes.string.isRequired,\n            date: PropTypes.string.isRequired,\n          }).isRequired,\n        }).isRequired,\n      })).isRequired,\n    }).isRequired,\n    site: PropTypes.shape({\n      siteMetadata: PropTypes.shape({\n        title: PropTypes.string.isRequired,\n      }).isRequired,\n    }).isRequired,\n  }).isRequired,\n};\n\nexport default Blog;\n\nexport const pageQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      sort: {\n        order: DESC, fields: [frontmatter___date]\n      }\n    ) {\n      edges {\n        node {\n          excerpt\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title,\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}